[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def setup_logging(level: int = logging.INFO) -> None:\n    logger = logging.getLogger()\n    logger.setLevel(level)\n    file_handler = RotatingFileHandler(\n        LOG_FILE, maxBytes=1024 * 1024 * 5, backupCount=5\n    )\n    file_handler.setLevel(level)\n    file_formatter = logging.Formatter(\n        \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n    )",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "LOG_FILE",
        "kind": 5,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "LOG_FILE = Path(__file__).parents[1] / \"tests/main.log\"\ndef setup_logging(level: int = logging.INFO) -> None:\n    logger = logging.getLogger()\n    logger.setLevel(level)\n    file_handler = RotatingFileHandler(\n        LOG_FILE, maxBytes=1024 * 1024 * 5, backupCount=5\n    )\n    file_handler.setLevel(level)\n    file_formatter = logging.Formatter(\n        \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "fixture",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def fixture() -> None:\n    pass",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_example",
        "kind": 2,
        "importPath": "tests.test_example",
        "description": "tests.test_example",
        "peekOfCode": "def test_example() -> None:\n    assert 1 == 1",
        "detail": "tests.test_example",
        "documentation": {}
    },
    {
        "label": "run_cmd",
        "kind": 2,
        "importPath": "poetry_scripts",
        "description": "poetry_scripts",
        "peekOfCode": "def run_cmd(cmd: str) -> None:\n    subprocess.run(cmd, shell=True, check=True)\ndef run_tests() -> None:\n    # Install requirements by poetry\n    run_cmd(\"poetry install\")\n    # Run pre-commit tests\n    # run_cmd(\"poetry run pre-commit autoupdate\")\n    # run_cmd(\"poetry run pre-commit clean\")\n    # run_cmd(\"poetry run pre-commit install\")\n    run_cmd(\"poetry run pre-commit run --all-files\")",
        "detail": "poetry_scripts",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "kind": 2,
        "importPath": "poetry_scripts",
        "description": "poetry_scripts",
        "peekOfCode": "def run_tests() -> None:\n    # Install requirements by poetry\n    run_cmd(\"poetry install\")\n    # Run pre-commit tests\n    # run_cmd(\"poetry run pre-commit autoupdate\")\n    # run_cmd(\"poetry run pre-commit clean\")\n    # run_cmd(\"poetry run pre-commit install\")\n    run_cmd(\"poetry run pre-commit run --all-files\")\n    # Generate coverage report --cov=./ --cov-report=xml --cov-report=html -vv\n    run_cmd(\"poetry run pytest  --cov=./ --cov-report=xml --cov-report=html -vv\")",
        "detail": "poetry_scripts",
        "documentation": {}
    }
]
